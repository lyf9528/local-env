# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}
  frontend:
    driver: ${NETWORKS_DRIVER}
# 服务容器配置
services:
  golang: # 自定义容器名称
    build:
      context: ./golang # 指定构建使用的 Dockerfile 文件
    container_name: golang
    environment: # 设置环境变量
      - TZ=${TZ}
    volumes: # 设置挂载目录
      - ${CODE_PATH_HOST}:/usr/src/code # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
    ports: # 设置端口映射
      - "8000:8000"
      - "9000:9000"
    stdin_open: true # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always # 指定容器退出后的重启策略为始终重启

  etcd: # 自定义容器名称
    build:
      context: ./etcd # 指定构建使用的 Dockerfile 文件
    container_name: etcd
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      #- ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379 容器内开发使用该配置 windows环境下该参数需要注释或修改
    ports: # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  etcd-manage:
    build:
      context: ./etcd-manage
    container_name: etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080" # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - etcd # 在 etcd 服务容器启动后启动
    networks:
      - backend
    restart: always

  mysql:
    build:
      context: ./mysql
    container_name: mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME} # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # 设置 Mysql root 用户密码
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "${MYSQL_PORT}:3306" # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  asynqmon:
    image: ./asynqmon
    container_name: asynqmon
    ports:
      - 8980:8080
    command:
      - "--redis-addr=redis:6379"
    #  - '--redis-password=G62m50oigInC30sf'
    restart: always
    networks:
      - backend
    depends_on:
      - redis

  redis:
    build:
      context: ./redis
    container_name: redis
    environment:
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    #command: "redis-server --requirepass G62m50oigInC30sf  --appendonly yes"
    ports:
      - "${REDIS_PORT}:6379" # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  rabbitmq:
    build:
      context: ./rabbitmq
    container_name: rabbitmq
    ports:
      - "${RABBIT_PORT}:5672"
      - "${RABBIT_UI_PORT}:15672"
    volumes:
      - ${DATA_PATH_HOST}/rabbit/mnesia:/var/lib/rabbitmq
      - ${DATA_PATH_HOST}/log/rabbit:/var/log/rabbitmq
    networks:
      - backend
    restart: always

  mysql-manage:
    build:
      context: ./mysql-manage
    container_name: mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME} # 设置连接的 Mysql 服务用户名称
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD} # 设置连接的 Mysql 服务用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD} # 设置连接的 Mysql 服务 root 用户密码
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST} # 设置连接的 Mysql 服务 host，可以是 Mysql 服务容器的名称，也可以是 Mysql 服务容器的 ip 地址
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT} # 设置连接的 Mysql 服务端口号
    ports:
      - "${MYSQL_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - mysql # 在 Mysql 服务容器启动后启动
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ./redis-manage
    container_name: redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME} # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD} # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST} # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT} # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - redis # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always

  prometheus:
    build:
      context: ./prometheus
    container_name: prometheus
    environment:
      - TZ=${TZ}
    volumes:
      - ./prometheus/prometheus.yaml:/opt/bitnami/prometheus/conf/prometheus.yaml # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090" # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ./grafana
    container_name: grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000" # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    container_name: jaeger
    environment:
      - TZ=${TZ}
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    ports:
      - "${JAEGER_PORT}:16686" # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "14268:14268"
      - "9411:9411"
    networks:
      - backend
    restart: always

  elasticsearch:
    image: ./elasticsearch
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch
    ports:
      - ${ES_HTTP_PORT}:9200
      - ${ES_TRANS_PORT}:9300
    networks:
      - backend
    restart: always

  kibana:
    image: ./kibana
    container_name: kibana
    environment:
      - TZ=${TZ}
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - backend
    restart: always

  zookeeper:
    image: ./zookeeper
    container_name: zookeeper
    environment:
      - TZ=${TZ}
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend
    restart: always

  kafka:
    image: ./kafka
    container_name: kafka
    environment:
      - TZ=${TZ}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    ports:
      - "${KAFKA_PORT}:9092"
    restart: always
    networks:
      - backend
    depends_on:
      - zookeeper

  dtm:
    build:
      context: ./dtm
    container_name: dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always

  consul:
    image: ./consul
    container_name: consul
    environment:
      - TZ=${TZ}
    ports:
      - "${CONSUL_HTTP_PORT}:8500"
      - "${CONSUL_GRPC_PORT}:8502"
    networks:
      - backend
    restart: always

  nacos:
    image: ./nacos
    container_name: nacos
    environment:
      - TZ=${TZ}
      - MODE=standalone
    ports:
      - "${NACOS_PORT}:8848"
    networks:
      - backend
    restart: always

  nginx:
    image: ./nginx
    container_name: nginx
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - ${NGINX_PORT}:8000
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./data/nginx/log:/var/log/nginx
    networks:
      - frontend
